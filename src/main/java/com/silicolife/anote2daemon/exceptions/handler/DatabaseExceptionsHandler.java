package com.silicolife.anote2daemon.exceptions.handler;

import org.hibernate.PropertyValueException;
import org.hibernate.exception.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.silicolife.anote2daemon.exceptions.ExceptionsCodes;
import com.silicolife.anote2daemon.exceptions.pojo.ExceptionInfo;

/**
 * Generic class to handler with database exceptions generated by anote2daemon
 * 
 * @author Joel Azevedo Costa
 * @year 2015
 *
 */
@ControllerAdvice
public class DatabaseExceptionsHandler {

	/**
	 * Constraint violation exceptions
	 * 
	 * @param e
	 * @return
	 */
	@ExceptionHandler(ConstraintViolationException.class)
	public ResponseEntity<ExceptionInfo> handleException(ConstraintViolationException e) {
		String rootCause = null;
		String message = e.getMessage();
		Throwable cause = e.getCause();
		if (cause != null)
			rootCause = cause.getMessage();

		ExceptionInfo exception = new ExceptionInfo(ExceptionsCodes.codeConstraint, message, rootCause);
		return new ResponseEntity<ExceptionInfo>(exception, HttpStatus.CONFLICT);
	}

	/**
	 * DataIntegration violation exceptions
	 * 
	 * @param e
	 * @return
	 */
	@ExceptionHandler(DataIntegrityViolationException.class)
	public ResponseEntity<ExceptionInfo> handleException(DataIntegrityViolationException e) {
		String rootCause = null;
		String message = e.getMessage();
		Throwable cause = e.getRootCause();
		if (cause != null)
			rootCause = cause.getMessage();

		ExceptionInfo exception = new ExceptionInfo(ExceptionsCodes.codeConstraint, message, rootCause);
		return new ResponseEntity<ExceptionInfo>(exception, HttpStatus.CONFLICT);
	}

	/**
	 * Property value exceptions
	 * 
	 * @param e
	 * @return
	 */
	@ExceptionHandler(PropertyValueException.class)
	public ResponseEntity<ExceptionInfo> handleException(PropertyValueException e) {
		String rootCause = null;
		String message = e.getMessage();
		Throwable cause = e.getCause();
		if (cause != null)
			rootCause = cause.getMessage();

		ExceptionInfo exception = new ExceptionInfo(ExceptionsCodes.codeWrongValue, message, rootCause);
		return new ResponseEntity<ExceptionInfo>(exception, HttpStatus.CONFLICT);
	}

	/*
	 * @ExceptionHandler({ SQLException.class, DataAccessException.class })
	 * public ResponseEntity<DaemonResponse<?>>
	 * handlingDatabaseExceptions(Exception e) { DaemonResponse<?> response =
	 * new DaemonResponse<>(); String message = null; String rootCause = null;
	 * 
	 * if (e.getMessage() != null) message = e.getMessage(); if (e.getCause() !=
	 * null) rootCause = e.getCause().getMessage();
	 * 
	 * ExceptionInfo exception = new
	 * ExceptionInfo(ExceptionsCodes.generalDbCode, message, rootCause);
	 * response.setException(exception); return new
	 * ResponseEntity<DaemonResponse<?>>(response,
	 * HttpStatus.SERVICE_UNAVAILABLE); }
	 * 
	 * 
	 * @ExceptionHandler(HibernateException.class) public
	 * ResponseEntity<DaemonResponse<?>>
	 * handlingHibernateExceptions(HibernateException e) { DaemonResponse<?>
	 * response = new DaemonResponse<>(); String message = null; String
	 * rootCause = null;
	 * 
	 * if (e.getMessage() != null) message = e.getMessage(); if (e.getCause() !=
	 * null) rootCause = e.getCause().getMessage();
	 * 
	 * ExceptionInfo exception = new
	 * ExceptionInfo(ExceptionsCodes.hibernateCode, message, rootCause);
	 * response.setException(exception); return new
	 * ResponseEntity<DaemonResponse<?>>(response, HttpStatus.NOT_IMPLEMENTED);
	 * }
	 */
}
