package com.silicolife.anote2daemon.model.pojo;

// Generated 3/Fev/2015 12:37:09 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * DaemonDataObject generated by hbm2java
 */
@Entity
@Table(name = "daemon_data_object")
public class DaemonDataObject implements java.io.Serializable {

	private DaemonDataObjectId id;
	private DaemonTypeResources daemonTypeResources;
	private Set<DaemonUsersHasDataObject> daemonUsersHasDataObjects = new HashSet<DaemonUsersHasDataObject>(0);

	public DaemonDataObject() {
	}

	public DaemonDataObject(DaemonDataObjectId id, DaemonTypeResources daemonTypeResources) {
		this.id = id;
		this.daemonTypeResources = daemonTypeResources;
	}

	public DaemonDataObject(DaemonDataObjectId id, DaemonTypeResources daemonTypeResources, Set<DaemonUsersHasDataObject> daemonUsersHasDataObjects) {
		this.id = id;
		this.daemonTypeResources = daemonTypeResources;
		this.daemonUsersHasDataObjects = daemonUsersHasDataObjects;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "idResource", column = @Column(name = "id_resource", nullable = false)), @AttributeOverride(name = "typeResourcesId", column = @Column(name = "type_resources_id", nullable = false)) })
	public DaemonDataObjectId getId() {
		return this.id;
	}

	public void setId(DaemonDataObjectId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type_resources_id", nullable = false, insertable = false, updatable = false)
	public DaemonTypeResources getDaemonTypeResources() {
		return this.daemonTypeResources;
	}

	public void setDaemonTypeResources(DaemonTypeResources daemonTypeResources) {
		this.daemonTypeResources = daemonTypeResources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "daemonDataObject")
	public Set<DaemonUsersHasDataObject> getDaemonUsersHasDataObjects() {
		return this.daemonUsersHasDataObjects;
	}

	public void setDaemonUsersHasDataObjects(Set<DaemonUsersHasDataObject> daemonUsersHasDataObjects) {
		this.daemonUsersHasDataObjects = daemonUsersHasDataObjects;
	}

}
