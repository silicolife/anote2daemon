package com.silicolife.anote2daemon.model.pojo;

// Generated 3/Fev/2015 12:37:09 by Hibernate Tools 4.0.0

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * QueriesHasClustersProcess generated by hbm2java
 */
@Entity
@Table(name = "queries_has_clusters_process")
public class QueriesHasClustersProcess implements java.io.Serializable {

	private QueriesHasClustersProcessId id;
	private Queries queries;
	private ClustersProcesses clustersProcesses;

	public QueriesHasClustersProcess() {
	}

	public QueriesHasClustersProcess(QueriesHasClustersProcessId id, Queries queries, ClustersProcesses clustersProcesses) {
		this.id = id;
		this.queries = queries;
		this.clustersProcesses = clustersProcesses;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "queriesId", column = @Column(name = "queries_id", nullable = false)), @AttributeOverride(name = "clustersProcessId", column = @Column(name = "clusters_process_id", nullable = false)) })
	public QueriesHasClustersProcessId getId() {
		return this.id;
	}

	public void setId(QueriesHasClustersProcessId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "queries_id", nullable = false, insertable = false, updatable = false)
	public Queries getQueries() {
		return this.queries;
	}

	public void setQueries(Queries queries) {
		this.queries = queries;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clusters_process_id", nullable = false, insertable = false, updatable = false)
	public ClustersProcesses getClustersProcesses() {
		return this.clustersProcesses;
	}

	public void setClustersProcesses(ClustersProcesses clustersProcesses) {
		this.clustersProcesses = clustersProcesses;
	}

}
